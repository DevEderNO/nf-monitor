generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Auth {
  id        Int      @id @default(autoincrement())
  token     String?
  userId    Int?
  name      String
  username  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                Int      @id @default(autoincrement())
  userId            String
  nome              String
  sobrenome         String?
  cpf               String?
  email             String?
  phoneNumber       String?
  ativo             Boolean  @default(false)
  emailConfirmed    Boolean  @default(false)
  accessFailedCount Int
  dataDeCriacao     String
  lockoutEnd        String?
  eUsuarioEmpresa   Boolean  @default(false)
  role              String?
  ePrimeiroAcesso   Boolean  @default(false)
  nivel             Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Empresa {
  id        Int      @id @default(autoincrement())
  empresaId String
  nome      String
  cnpj      String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Directory {
  id           Int      @id @default(autoincrement())
  path         String
  modifiedtime DateTime
  size         Int
  directories  Int
  xmls         Int
  pdfs         Int
  zips         Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DirectoryDiscovery {
  id           Int      @id @default(autoincrement())
  path         String
  modifiedtime DateTime
  size         Int
  directories  Int
  xmls         Int
  pdfs         Int
  zips         Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model File {
  id           Int       @id @default(autoincrement())
  filepath     String
  filename     String
  extension    String
  wasSend      Boolean   @default(false)
  dataSend     DateTime?
  isValid      Boolean   @default(false)
  bloqued      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isDirectory  Boolean   @default(false)
  isFile       Boolean   @default(false)
  modifiedtime DateTime?
  size         Int
}

model Configuration {
  id                    Int      @id @default(autoincrement())
  timeForProcessing     String   @default("00:00")
  timeForConsultingSieg String   @default("00:00")
  directoryDownloadSieg String?
  viewUploadedFiles     Boolean  @default(false)
  apiKeySieg            String   @default("")
  emailSieg             String?
  senhaSieg             String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Historic {
  id        Int       @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime?
  log       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Error {
  id      Int       @id @default(autoincrement())
  message String
  stack   String
  type    ErrorType @default(Others)
  date    DateTime  @default(now())
}

enum ErrorType {
  UncaughtException
  UnhandledRejection
  RenderProcessGone
  GPUProcessGone
  Others
}

model CountedNotes {
  id         Int          @id @default(autoincrement())
  dataInicio DateTime
  dataFim    DateTime
  nfe        Int          @default(0)
  nfce       Int          @default(0)
  cte        Int          @default(0)
  cfe        Int          @default(0)
  nfse       Int          @default(0)
  role       RoleTypeSieg
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

enum RoleTypeSieg {
  Emit
  Dest
  Tom
}
